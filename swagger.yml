swagger: '2.0'
info: {description: urlcheck is a url monitoring service, title: urlcheck, version: 0.0.1}
schemes: [https]
basePath: /prod
paths:
  /probe/candidate:
    post:
      consumes: [application/json]
      description: Returns candidates for the specified region
      parameters:
        - description: Candidate request
          in: body
          name: CandidateRequest
          required: true
          schema: {$ref: '#/definitions/CandidateRequest'}
      produces: [application/json]
      responses:
        200:
          description: Contact email sent successfully
          schema:
            type: array
            items: {$ref: '#/definitions/Candidate'}
      x-amazon-apigateway-integration:
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responses:
          default: {statusCode: '200'}
        type: aws_proxy
        uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:326341022855:function:urlcheck-api-probe-candidates/invocations
  /probe/result:
    post:
      consumes: [application/json]
      description: Submit check results
      parameters:
        - description: Check results
          in: body
          name: CheckResults
          required: true
          schema:
            type: array
            items: {$ref: '#/definitions/CheckResult'}
      produces: [application/json]
      responses:
        202:
          description: Check results submitted successfully
      x-amazon-apigateway-integration:
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responses:
          default: {statusCode: '200'}
        type: aws_proxy
        uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:326341022855:function:urlcheck-api-probe-results/invocations
  /user:
    post:
      consumes: [application/json]
      description: Creates a user
      parameters:
        - description: Create user request
          in: body
          name: CreateUser
          required: true
          schema: {$ref: '#/definitions/CreateUser'}
      produces: [application/json]
      responses:
        200:
          description: User created
      x-amazon-apigateway-integration:
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responses:
          default: {statusCode: '200'}
        type: aws_proxy
        uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:326341022855:function:urlcheck-api-user-create/invocations
  /user/{username}:
    get:
      produces: [application/json]
      parameters:
        - description: Username
          in: path
          name: username
          required: true
          type: string
        - description: Flag to include user checks
          in: query
          name: include-checks
          required: false
          type: boolean
      responses:
        200:
          description: User
          schema: {$ref: '#/definitions/User'}
        404:
          description: User not found
      x-amazon-apigateway-integration:
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responses:
          default: {statusCode: '200'}
        type: aws_proxy
        uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:326341022855:function:urlcheck-api-user-get-by-username/invocations
  /check/{check-id}:
    get:
      produces: [application/json]
      parameters:
        - description: Check id
          in: path
          name: check-id
          required: true
          type: string
        - description: Flag to includes check changes
          in: query
          name: include-changes
          required: false
          type: string
        - description: Flag to includes check responses
          in: query
          name: include-responses
          required: false
          type: string
      responses:
        200:
          description: Check
          schema: {$ref: '#/definitions/Check'}
        404:
          description: Check not found
      x-amazon-apigateway-integration:
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responses:
          default: {statusCode: '200'}
        type: aws_proxy
        uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:326341022855:function:urlcheck-api-check-get-by-id/invocations
definitions:
  CandidateRequest:
    properties:
      region: {type: string}
    type: object
  Candidate:
    properties:
      id: {type: string}
      protocol: {type: string}
      url: {type: string}
      status: {type: string}
      confirming: {type: boolean}
    type: object
  CheckResult:
    properties:
      id: {type: string}
      previousStatus: {type: string}
      confirming: {type: boolean}
      statusCode: {type: number}
      responseTime: {type: number}
      region: {type: string}
    type: object
  CreateUser:
    properties:
      username: {type: string}
      email: {type: string}
      password: {type: string, format: password}
    type: object
  User:
    properties:
      username: {type: string}
      email: {type: string}
      admin: {type: boolean}
      created: {type: string, format: date-time}
      modified: {type: string, format: date-time}
      version: {type: number}
      credit: {type: number}
      checks:
        type: array
        items: {$ref: '#/definitions/Check'}
    type: object
  Check:
    properties:
      id: {type: string}
      username: {type: string}
      name: {type: string}
      url: {type: string}
      protocol: {type: string}
      status: {type: string}
      created: {type: string, format: date-time}
      modified: {type: string, format: date-time}
      disabled: {type: boolean}
      interval: {type: number}
      headers:
        type: array
        items: {$ref: '#/definitions/Header'}
      changes:
        type: array
        items: {$ref: '#/definitions/Change'}
      responses:
        type: array
        items: {$ref: '#/definitions/Response'}
    type: object
  Header:
    properties:
      name: {type: string}
      value: {type: string}
    type: object
  Change:
    properties:
      status: {type: string}
      statusCode: {type: number}
      created: {type: string, format: date-time}
    type: object
  Response:
    properties:
      duration: {type: number}
      region: {type: string}
      created: {type: string, format: date-time}
    type: object


