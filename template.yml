AWSTemplateFormatVersion: '2010-09-09'
Description: Provision AWS Web API Gateway and related AWS Lambda functions to support
  the urlcheck-web project
Parameters:
  DatabaseUrlParameter: {Description: Enter urlcheck database url., Type: String}
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com, apigateway.amazonaws.com, sns.amazonaws.com]
        Version: '2012-10-17'
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
      Path: /
  LambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaPublishSNS
      Roles:
        - Ref: LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: ['sns:Publish']
            Resource: '*'
  ApiGateway: 
    Type: AWS::ApiGateway::RestApi
    Properties:
      BodyS3Location: {Bucket: urlcheck-api, Key: swagger.yml}
      FailOnWarnings: true
  FunctionProbeCandidates:
    Type: AWS::Lambda::Function
    Properties:
      Code: {S3Bucket: urlcheck-api, S3Key: deploy.zip}
      Environment:
        Variables:
          DATABASE_URL: {Ref: DatabaseUrlParameter}
      FunctionName: urlcheck-api-probe-candidates
      Handler: src/probe/probeCandidates.handler
      MemorySize: 128
      Role:
        Fn::GetAtt: [LambdaExecutionRole, Arn]
      Runtime: nodejs6.10
      Timeout: 10
  FunctionProbeCheckResults:
    Type: AWS::Lambda::Function
    Properties:
      Code: {S3Bucket: urlcheck-api, S3Key: deploy.zip}
      Environment:
        Variables:
          DATABASE_URL: {Ref: DatabaseUrlParameter}
      FunctionName: urlcheck-api-probe-check-results
      Handler: src/probe/probeCheckResults.handler
      MemorySize: 128
      Role:
        Fn::GetAtt: [LambdaExecutionRole, Arn]
      Runtime: nodejs6.10
      Timeout: 10
  TopicResults:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            Fn::GetAtt: [FunctionProbeCheckResults, Arn]
          Protocol: lambda
      TopicName: check-results
  LambdaTopicChecksInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: {Ref: TopicResults}
      FunctionName:
        Fn::GetAtt: [FunctionProbeCheckResults, Arn]
  FunctionProbeResults:
    Type: AWS::Lambda::Function
    Properties:
      Code: {S3Bucket: urlcheck-api, S3Key: deploy.zip}
      Environment:
        Variables:
          RESULTS_TOPIC: {Ref: TopicResults}
      FunctionName: urlcheck-api-probe-results
      Handler: src/probe/probeResults.handler
      MemorySize: 128
      Role:
        Fn::GetAtt: [LambdaExecutionRole, Arn]
      Runtime: nodejs6.10
      Timeout: 10
  FunctionCheckGetById:
      Type: AWS::Lambda::Function
      Properties:
        Code: {S3Bucket: urlcheck-api, S3Key: deploy.zip}
        Environment:
          Variables:
            DATABASE_URL: {Ref: DatabaseUrlParameter}
        FunctionName: urlcheck-api-check-get-by-id
        Handler: src/check/checkGetById.handler
        MemorySize: 128
        Role:
          Fn::GetAtt: [LambdaExecutionRole, Arn]
        Runtime: nodejs6.10
        Timeout: 10
  FunctionUserGetByUsername:
    Type: AWS::Lambda::Function
    Properties:
      Code: {S3Bucket: urlcheck-api, S3Key: deploy.zip}
      Environment:
        Variables:
          DATABASE_URL: {Ref: DatabaseUrlParameter}
      FunctionName: urlcheck-api-user-get-by-username
      Handler: src/user/userGetByUsername.handler
      MemorySize: 128
      Role:
        Fn::GetAtt: [LambdaExecutionRole, Arn]
      Runtime: nodejs6.10
      Timeout: 10
  ApiGatewayFunctionCandidatePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt: [FunctionProbeCandidates, Arn]
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':'
            - Ref: ApiGateway
            - '/*/*/*/*'
  ApiGatewayFunctionResultPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt: [FunctionProbeResults, Arn]
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':'
            - Ref: ApiGateway
            - '/*/*/*/*'
  ApiGatewayFunctionCheckGetByIdPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt: [FunctionCheckGetById, Arn]
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':'
            - Ref: ApiGateway
            - '/*/*/*/*'
  ApiGatewayFunctionUserGetByUsernamePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt: [FunctionUserGetByUsername, Arn]
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':'
            - Ref: ApiGateway
            - '/*/*/*/*'
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGateway
    Properties:
      StageName: prod
      RestApiId: 
        Ref: ApiGateway
    
